/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
}

//
// Genome preparation options
//

process {
    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }


    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
    }

}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
        }
    }
}

process {
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.Lb.sorted" }
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_.*' {
        ext.prefix = { "${meta.id}.Lb.sorted.bam" }
    }
}

if (params.aligner == 'bwa') {
    process {
        withName: 'BWA_MEM' {
            ext.args   = { [
                            '-M',
                            params.bwa_min_score ? " -T ${params.bwa_min_score}" : '',
                            meta.read_group ? "-R ${meta.read_group}": ''
                        ].join(' ').trim() }
            ext.args2  = '-bhS -F 0x0100 -O BAM'
            ext.prefix = { "${meta.id}.Lb" }
        }
    }
}

if (params.aligner == 'bowtie2') {
    process {
        withName: 'BOWTIE2_ALIGN' {
            ext.args   = ''
            ext.prefix = { "${meta.id}.Lb" }
        }
    }
}

if (params.aligner == 'chromap') {
    process {
        withName: CHROMAP_INDEX {
            ext.args   = ''
        }
        withName: CHROMAP_CHROMAP {
            ext.args   = '-l 2000 --low-mem --SAM'
            ext.prefix = { "${meta.id}.Lb" }
        }
    }
}

if (params.aligner == 'star') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN' {
            ext.args   = [
                '--runMode alignReads',
                '--alignIntronMax 1',
                '--alignEndsType EndToEnd',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outSAMattributes NH HI AS NM MD',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
        }
    }
}

process {
    withName: 'PICARD_MERGESAMFILES' {
        ext.args   = '--SORT_ORDER coordinate --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.mLb.sorted" }
        publishDir = [ enabled: false ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
        ext.prefix = { "${meta.id}.mLb.mkD.sorted" }
    }

    withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.mkD.sorted.bam" }
    }

    // Should only be published when paired end data is used and save_align_intermeds is true
    withName: 'BAM_FILTER' {
        ext.prefix = { meta.single_end ?  "${meta.id}.mLb.noPublish" : "${meta.id}.mLb.flT.sorted" }
    }

    withName: 'BAM_REMOVE_ORPHANS' {
        ext.args   = '--only_fr_pairs'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [ enabled: false ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted.bam" }
    }

    withName: 'PHANTOMPEAKQUALTOOLS' {
        ext.args2  = { "-p=$task.cpus" }
    }

    withName: 'BEDTOOLS_GENOMECOV' {
        ext.prefix = { "${meta.id}" }
    }

    withName: 'UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix = { "${meta.id}" }
    }
}

if (!params.skip_picard_metrics) {
    process {
        withName: 'PICARD_COLLECTMULTIPLEMETRICS' {
            ext.args   = '--VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
            ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        }
    }
}

if (!params.skip_preseq) {
    process {
        withName: 'PRESEQ_LCEXTRAP' {
            ext.args   = '-verbose -bam -seed 1'
            ext.prefix = { "${meta.id}.mLb.clN" }
        }
    }
}

if (!params.skip_plot_profile) {
    process {
        withName: 'DEEPTOOLS_COMPUTEMATRIX' {
            ext.args   = 'scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --skipZeros --smartLabels'
            ext.prefix = { "${meta.id}.mLb.clN" }
        }

        withName: 'DEEPTOOLS_PLOTPROFILE' {
            ext.prefix = { "${meta.id}.mLb.clN" }
        }

        withName: 'DEEPTOOLS_PLOTHEATMAP' {
            ext.prefix = { "${meta.id}.mLb.clN" }
        }
    }
}

process {
    withName: 'KHMER_UNIQUEKMERS' {
        publishDir = [ enabled: false ]
    }
}

if (!params.skip_plot_fingerprint) {
    process {
        withName: 'DEEPTOOLS_PLOTFINGERPRINT' {
            ext.args   = { [
                '--skipZeros',
                "--numberOfSamples $params.fingerprint_bins",
                "--labels $meta.id $meta.control"
            ].join(' ').trim() }
            ext.prefix = { "${meta.id}.mLb.clN" }
        }
    }
}

process {
    withName: 'MACS2_CALLPEAK' {
        ext.args   = [
            '--keep-dup all',
            params.narrow_peak          ? '' : "--broad --broad-cutoff ${params.broad_cutoff}",
            params.save_macs_pileup     ? '--bdg --SPMR' : '',
            params.macs_fdr             ? "--qvalue ${params.macs_fdr}" : '',
            params.macs_pvalue          ? "--pvalue ${params.macs_pvalue}" : '',
            params.aligner == "chromap" ? "--format BAM" : ''
        ].join(' ').trim()
    }

    withName: 'FRIP_SCORE' {
        ext.args   = '-bed -c -f 0.20'
    }
}

if (!params.skip_peak_annotation) {
    process {
        withName: 'HOMER_ANNOTATEPEAKS_MACS2' {
            ext.args   = '-gid'
            ext.prefix = { "${meta.id}_peaks" }
        }
    }

    if (!params.skip_peak_qc) {
        process {
            withName: 'PLOT_MACS2_QC' {
                ext.args   = '-o ./ -p macs2_peak'
            }

            withName: 'PLOT_HOMER_ANNOTATEPEAKS' {
                ext.args   = '-o ./'
                ext.prefix = 'macs2_annotatePeaks'
            }
        }
    }
}

if (!params.skip_consensus_peaks) {
    process {
        withName: 'MACS2_CONSENSUS' {
            ext.when   = { meta.multiple_groups || meta.replicates_exist }
            ext.prefix = { "${meta.id}.consensus_peaks" }
        }

        withName: 'SUBREAD_FEATURECOUNTS'  {
            ext.args   = '-F SAF -O --fracOverlap 0.2'
            ext.prefix = { "${meta.id}.consensus_peaks" }
        }
    }

    if (!params.skip_peak_annotation) {
        process {
            withName: 'HOMER_ANNOTATEPEAKS_CONSENSUS' {
                ext.args   = '-gid'
                ext.prefix = { "${meta.id}.consensus_peaks" }
            }

            withName: 'ANNOTATE_BOOLEAN_PEAKS' {
                ext.prefix = { "${meta.id}.consensus_peaks" }
            }
        }
    }

    if (!params.skip_deseq2_qc) {
        process {
            withName: DESEQ2_QC {
                ext.when   = { meta.multiple_groups && meta.replicates_exist }
                ext.args   = [
                    '--id_col 1',
                    '--sample_suffix \'.mLb.clN.sorted.bam\'',
                    '--count_col 7',
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.prefix = { "${meta.id}.consensus_peaks" }
            }
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        }
    }
}
