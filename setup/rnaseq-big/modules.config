/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

def rseqc_modules = params.rseqc_modules ? params.rseqc_modules.split(',').collect{ it.trim().toLowerCase() } : []


process {

    withName: 'UNTAR_.*' {
        ext.args2 = '--no-same-owner'
    }

    withName: 'GFFREAD' {
        ext.args   = '--keep-exon-attrs -F -T'
    }

    withName: 'SALMON_INDEX' {
        ext.args   = params.gencode ? '--gencode' : ''
    }

    withName: 'RSEM_PREPAREREFERENCE_GENOME' {
        ext.args   = '--star'
    }

}

if (!params.skip_bbsplit && params.bbsplit_fasta_list) {
    process {
        withName: '.*:PREPARE_GENOME:BBMAP_BBSPLIT' {
            ext.args   = 'build=1'
        }
    }
}

//
// Read subsampling and strand inferring options
//

process {
    withName: 'FQ_SUBSAMPLE' {
        ext.args   = '--record-count 1000000 --seed 1'
        ext.prefix = { "${meta.id}.subsampled" }
    }

    withName: '.*:FASTQ_SUBSAMPLE_FQ_SALMON:SALMON_QUANT' {
        ext.args   = '--skipQuant'
    }
}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
                ext.args   = '--quiet'
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_RAW' {
                ext.args   = '--quiet'
            }

            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTQC_TRIM' {
                ext.args   = '--quiet'
            }
        }
    }
}

if (!params.skip_trimming) {
    if (params.trimmer == 'trimgalore') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
                ext.args   = {
                    [
                        "--fastqc_args '-t ${task.cpus}'",
                        params.extra_trimgalore_args ? params.extra_trimgalore_args.split("\\s(?=--)") : ''
                    ].flatten().unique(false).join(' ').trim()
                }
            }
        }
    }

    if (params.trimmer == 'fastp') {
        process {
            withName: '.*:FASTQ_FASTQC_UMITOOLS_FASTP:FASTP' {
                ext.args   = params.extra_fastp_args ?: ''
            }
        }
    }
}

if (params.with_umi && !params.skip_umi_extract) {
    process {
        withName: 'UMITOOLS_EXTRACT' {
            ext.args   = [
                    params.umitools_extract_method ? "--extract-method=${params.umitools_extract_method}" : '',
                    params.umitools_bc_pattern     ? "--bc-pattern='${params.umitools_bc_pattern}'" : '',
                    params.umitools_bc_pattern2    ? "--bc-pattern2='${params.umitools_bc_pattern2}'" : '',
                    params.umitools_umi_separator  ? "--umi-separator='${params.umitools_umi_separator}'" : ''
            ].join(' ').trim()
        }
    }
}

//
// Contaminant removal options
//

if (!params.skip_bbsplit) {
    process {
        withName: 'BBMAP_BBSPLIT' {
            ext.args   = 'build=1 ambiguous2=all maxindel=150000'
        }
    }
}

if (params.remove_ribo_rna) {
    process {
        withName: 'SORTMERNA' {
            ext.args   = '--num_alignments 1 -v'
        }
    }
}

//
// General alignment options
//

if (!params.skip_alignment) {
    process {
        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.sorted.bam" }
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.sorted" }
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
            ext.args   = params.bam_csi_index ? '-c' : ''
        }
    }

    if (!params.skip_markduplicates && !params.with_umi) {
        process {
            withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                ext.args   = '--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp'
                ext.prefix = { "${meta.id}.markdup.sorted" }
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.markdup.sorted" }
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.markdup.sorted.bam" }
            }
        }
    }

    if (params.with_umi && ['star_salmon','hisat2'].contains(params.aligner)) {
        process {
            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:UMITOOLS_DEDUP' {
                ext.args   = { [
                    meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
                    params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
                    params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
                ].join(' ').trim() }
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:SAMTOOLS_INDEX' {
                ext.args   = params.bam_csi_index ? '-c' : ''
                ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_GENOME:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
            }
        }
    }

    if (!params.skip_bigwig) {
        process {
            withName: 'BEDTOOLS_GENOMECOV' {
                ext.args   = '-split -du'
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.forward" }
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.forward" }
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDCLIP' {
                ext.prefix = { "${meta.id}.clip.reverse" }
            }

            withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
                ext.prefix = { "${meta.id}.reverse" }
            }
        }
    }

    if (!params.skip_stringtie) {
        process {
            withName: 'STRINGTIE_STRINGTIE' {
                ext.args   = [
                    '-v',
                    params.stringtie_ignore_gtf ? '' : '-e'
                ].join(' ').trim()
            }
        }
    }
}

//
// STAR Salmon alignment options
//

if (!params.skip_alignment && params.aligner == 'star_salmon') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = [
                '--quantMode TranscriptomeSAM',
                '--twopassMode Basic',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outFilterMultimapNmax 20',
                '--alignSJDBoverhangMin 1',
                '--outSAMattributes NH HI AS NM MD',
                '--quantTranscriptomeBan Singleend',
                '--outSAMstrandField intronMotif',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : '',
                params.extra_star_align_args ? params.extra_star_align_args.split("\\s(?=--)") : ''
            ].flatten().unique(false).join(' ').trim()
        }

        withName: '.*:QUANTIFY_STAR_SALMON:SALMON_QUANT' {
            ext.args   = params.extra_salmon_quant_args ?: ''
        }

    }

    if (params.with_umi) {
        process {
            withName: 'NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT' {
                ext.args   = '-n'
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:UMITOOLS_PREPAREFORSALMON' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.filtered" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
                ext.prefix = { "${meta.id}.transcriptome.sorted" }
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.transcriptome.sorted.bam" }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
                ext.args   = { [
                    meta.single_end                 ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
                    params.umitools_grouping_method ? "--method='${params.umitools_grouping_method}'" : '',
                    params.umitools_umi_separator   ? "--umi-separator='${params.umitools_umi_separator}'" : ''
                ].join(' ').trim() }
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted" }
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
                ext.prefix = { "${meta.id}.umi_dedup.transcriptome.sorted.bam" }
            }
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_STAR_SALMON' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'star_salmon'
            }
        }
    }
}

//
// STAR RSEM alignment options
//

if (!params.skip_alignment && params.aligner == 'star_rsem') {
    process {
        withName: '.*:QUANTIFY_RSEM:RSEM_CALCULATEEXPRESSION' {
            ext.args   = [
                '--star',
                '--star-output-genome-bam',
                '--star-gzipped-read-file',
                '--estimate-rspd',
                '--seed 1'
            ].join(' ').trim()
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_RSEM' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'star_rsem'
            }
        }
    }
}

//
// HISAT2 alignment options
//

if (!params.skip_alignment && params.aligner == 'hisat2') {
    process {
        withName: '.*:FASTQ_ALIGN_HISAT2:HISAT2_ALIGN' {
            ext.args   = '--met-stderr --new-summary --dta'
        }
    }
}

//
// Post-alignment QC options
//

if (!params.skip_alignment && !params.skip_qc) {
    if (!params.skip_preseq) {
        process {
            withName: 'PRESEQ_LCEXTRAP' {
                ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
            }
        }
    }

    if (!params.skip_biotype_qc && params.featurecounts_group_type) {
        process {
            withName: 'SUBREAD_FEATURECOUNTS' {
                ext.args   = [
                    '-B -C',
                    params.gencode ? "-g gene_type" : "-g $params.featurecounts_group_type",
                    "-t $params.featurecounts_feature_type"
                ].join(' ').trim()
            }

        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        }
    }
}

//
// Salmon pseudo-alignment options
//

if (params.pseudo_aligner == 'salmon') {
    process {
        withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {
            ext.args   = params.extra_salmon_quant_args ?: ''
        }
    }

    if (!params.skip_qc & !params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC_SALMON' {
                ext.args   = [
                    "--id_col 1",
                    "--sample_suffix ''",
                    "--outprefix deseq2",
                    "--count_col 3",
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.args2  = 'salmon'
            }
        }
    }
}
